using System;
using System.Collections.Generic;
using System.Data.Entity.Infrastructure;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Transactions;
using WebApp.DAL.Data;
using WebApp.DAL.Helpers;
using WebApp.DAL.Models;
using GoodsAndService = WebApp.DAL.Data.GoodsAndService;

namespace WebApp.DAL.DAL
{
    internal class RequestFormDAL : DALBase
    {
        public Guid Save(PaymentRequestForm entity)
        {
            try
            {
                using (TransactionScope scope = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = IsolationLevel.RepeatableRead }))
                {
                    entity.AutoGeneratedSequence = (_dbContext.PaymentRequestForms.Max(m => (int?)m.AutoGeneratedSequence) ?? 0) + 1;
                    entity.PPRFNo = GeneralHelper._getRequestNumber(entity.DocumentType, _dbContext.PayingEntities.Where(w => w.Id.Equals(entity.PayingEntityId)).FirstOrDefault().Abbreviation,
                                                                        entity.Month, entity.Year, entity.AutoGeneratedSequence);
                    //entity.PPRFNo = _dbContext.PayingEntities.Where(w => w.Id.Equals(entity.PayingEntityId)).FirstOrDefault().Abbreviation + "/"
                    //                + string.Format("{0:00}", entity.Month) + (new DateTime(Convert.ToInt32(entity.Year), 01, 01)).ToString("yy") + "/"
                    //                + string.Format("{0:000000}", entity.AutoGeneratedSequence);
                    entity.Status = "Pending";
                    _dbContext.PaymentRequestForms.Add(entity);
                    _dbContext.SaveChanges();

                    scope.Complete();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return entity.Id;
        }

        public Guid SaveDraft(PaymentRequestForm entity)
        {
            try
            {

                using (TransactionScope scope = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = IsolationLevel.RepeatableRead }))
                {
                    entity.DocumentType = "Draft";
                    entity.AutoGeneratedSequence = (_dbContext.PaymentRequestForms.Max(m => (int?)m.AutoGeneratedSequence) ?? 0) + 1;
                    //entity.PPRFNo = GeneralHelper._getRequestNumber(entity.DocumentType, _dbContext.PayingEntities.Where(w => w.Id.Equals(entity.PayingEntityId)).FirstOrDefault().Abbreviation,
                    //                                                    entity.Month, entity.Year, entity.AutoGeneratedSequence);
                    entity.PPRFNo = "Draft";
                    //entity.PPRFNo = _dbContext.PayingEntities.Where(w => w.Id.Equals(entity.PayingEntityId)).FirstOrDefault().Abbreviation + "/"
                    //                + string.Format("{0:00}", entity.Month) + (new DateTime(Convert.ToInt32(entity.Year), 01, 01)).ToString("yy") + "/"
                    //                + string.Format("{0:000000}", entity.AutoGeneratedSequence);
                    entity.Status = "Draft";
                    _dbContext.PaymentRequestForms.Add(entity);
                    _dbContext.SaveChanges();

                    scope.Complete();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return entity.Id;
        }

        public Guid UpdateDraft(Guid requestId, PaymentRequestForm entity)
        {
            try
            {
                var PaymentRequestForms = List().Where(w => w.Id.Equals(requestId)).FirstOrDefault();
                if (PaymentRequestForms != null)
                {
                    entity.PPRFNo = GeneralHelper._getRequestNumber(entity.DocumentType, _dbContext.PayingEntities.Where(w => w.Id.Equals(entity.PayingEntityId)).FirstOrDefault().Abbreviation,
                                                                        entity.Month, entity.Year, entity.AutoGeneratedSequence);
                    if (entity.PayingEntity != null)
                    {
                        PaymentRequestForms.PayingEntity = entity.PayingEntity;
                    }
                    if (entity.PayingEntityId != null)
                    {
                        PaymentRequestForms.PayingEntityId = entity.PayingEntityId;
                    }
                    if (entity.PprfDate != null)
                    {
                        PaymentRequestForms.PprfDate = entity.PprfDate;
                    }
                    if (entity.Department != null)
                    {
                        PaymentRequestForms.Department = entity.Department;
                    }
                    if (entity.DepartmentId != null)
                    {
                        PaymentRequestForms.DepartmentId = entity.DepartmentId;
                    }
                    if (entity.DocumentType != null)
                    {
                        PaymentRequestForms.DocumentType = entity.DocumentType;
                    }
                    if (entity.FrequencyType != null)
                    {
                        PaymentRequestForms.FrequencyType = entity.FrequencyType;
                    }
                    if (entity.FrequencyTypeId != null)
                    {
                        PaymentRequestForms.FrequencyTypeId = entity.FrequencyTypeId;
                    }
                    if (entity.Description != null)
                    {
                        PaymentRequestForms.Description = entity.Description;
                    }
                    if (entity.DueDate != null)
                    {
                        PaymentRequestForms.DueDate = entity.DueDate;
                    }
                    if (entity.PprfDate != null)
                    {
                        PaymentRequestForms.PprfDate = entity.PprfDate;
                    }
                   if(entity.GoodsAndServices!=null)
                    {
                      var back=  UpdateGoodsAndServices(requestId);
                       PaymentRequestForms.GoodsAndServices = entity.GoodsAndServices;
                    }
                  
                    //if (entity.Approvers != null)
                    //{                       
                    //  UpdateApprovers(requestId, entity.Approvers);
                    //}
                    if (entity.PayeeBankAccountDetail != null)
                    {
                        PaymentRequestForms.PayeeBankAccountDetail = entity.PayeeBankAccountDetail;
                    }
                    if (entity.CurrencyId != null)
                    {
                        PaymentRequestForms.CurrencyId = entity.CurrencyId;
                    }
                    if (entity.Tax2TypeId != null)
                    {
                        PaymentRequestForms.Tax2TypeId = entity.Tax2TypeId;
                    }
                    PaymentRequestForms.Tax2Amount = entity.Tax2Amount;                 
                    PaymentRequestForms.Tax2AmountUSD = entity.Tax2AmountUSD;                    
                    PaymentRequestForms.Tax2AmountEuro = entity.Tax2AmountEuro;
                    PaymentRequestForms.Tax3TypeId = entity.Tax3TypeId;
                    PaymentRequestForms.Tax3Amount = entity.Tax3Amount;
                    PaymentRequestForms.Tax3AmountUSD = entity.Tax3AmountUSD;
                    PaymentRequestForms.Tax3AmountEuro = entity.Tax3AmountEuro;
                    if (entity.OriginatorId != null)
                    {
                        PaymentRequestForms.OriginatorId = entity.OriginatorId;
                    }
                    PaymentRequestForms.USDExRate = entity.USDExRate;                   
                    PaymentRequestForms.EuroExRate = entity.EuroExRate;
                    PaymentRequestForms.PPRFNo = entity.PPRFNo;
                    PaymentRequestForms.Status = "Pending";
                    PaymentRequestForms.Month = entity.Month;
                    PaymentRequestForms.Year = entity.Year;
                    if (entity.PaymentMethodId != null)
                    {
                        PaymentRequestForms.PaymentMethodId = entity.PaymentMethodId;
                    }                   
                    _dbContext.SaveChanges();
                   
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return requestId;
        }

        public List<GoodsAndService> UpdateGoodsAndServices( Guid PaymentRequestFormId )
        {
                try
            {
                var form = GoodsAndServiceList();
                var UpdateGoodsAndService = form.Where(w => w.PaymentRequestFormId.Equals(PaymentRequestFormId)).ToList();
               
                    var backup = UpdateGoodsAndService;
                UpdateGoodsAndService.ForEach(f =>
                    {

                        _dbContext.Entry(f).State = System.Data.Entity.EntityState.Deleted;
                    });

                _dbContext.SaveChanges();
                return backup;
            }
            catch (Exception ex)
            {

            }
            return null;
        }




        public bool UpdateApprovers(Guid requestId, List<RequestApprover> approvers)
        {
            //var manager = ((IObjectContextAdapter)_dbContext).ObjectContext.ObjectStateManager;
            try
            {
                var form = List().Where(w => w.Id.Equals(requestId)).FirstOrDefault();
                if (form != null)
                {
                    //foreach (var appro in form.Approvers)
                    //{
                    //    if (appro.ApprovalStatus == ApprovalStatus.PENDING)
                    //        form.Approvers.Remove(appro);
                    //}
                    var pending = form.Approvers.Where(w => w.ApprovalStatus == ApprovalStatus.PENDING).ToList();
                    pending.ForEach(f =>
                    {
                        form.Approvers.Remove(f);
                        _dbContext.Entry(f).State = System.Data.Entity.EntityState.Deleted;
                    });
                    //approvers.ForEach(f =>
                    //{
                    //    form.Approvers.Add(new RequestApprover
                    //    {
                    //        ApprovalStatus = ApprovalStatus.PENDING,
                    //        ApprovalToken = f.ApprovalToken,
                    //        ApproverId = f.ApproverId,
                    //        SequenceNo = f.SequenceNo
                    //    });
                    //});
                    form.Approvers.AddRange(approvers);
                }
                //_dbContext.PaymentRequestForms.Attach(form);
                //var manager = ((IObjectContextAdapter)_dbContext).ObjectContext.ObjectStateManager;
                //manager.ChangeObjectState(form, System.Data.Entity.EntityState.Modified);
                _dbContext.SaveChanges();
                return true;
            }
            catch (Exception e)
            {

            }
            return false;
        }

        public bool Update(UpdateRequestViewModel model)
        {
            var id = model.RequestId.ToGuid();
            var form = List().Where(w => w.Id.Equals(id)).FirstOrDefault();


            return false;
        }

        public IQueryable<PaymentRequestForm> List()
        {
            return _dbContext.PaymentRequestForms.Where(w=>!w.IsCancelled);
        }
        public IQueryable<GoodsAndService> GoodsAndServiceList()
        {
            return _dbContext.GoodsAndServices;
        }

        public bool UpdateClarificationRequired(Guid requestId, bool status)
        {
            try
            {
                var form = List().Where(w => w.Id.Equals(requestId)).FirstOrDefault();
                if (form != null)
                {
                    form.ClarificationRequired = status;
                    _dbContext.SaveChanges();
                    return true;
                }
            }
            catch (Exception ex)
            {

            }
            return false;
        }
        public bool UpdateRequestClarifications(Guid requestId, string clarifications)
        {
            try
            {
                var form = List().Where(w => w.Id.Equals(requestId)).FirstOrDefault();
                if (form != null)
                {
                    form.Clarifications = clarifications;
                    form.ClarificationRequired = false;
                    _dbContext.SaveChanges();
                    return true;
                }
            }
            catch (Exception ex)
            {

            }
            return false;
        }



        public bool UpdateRequestReferenceDocument(Guid requestId, string documentOriginalName, string documentPath)
        {
            try
            {
                var form = List().Where(w => w.Id.Equals(requestId)).FirstOrDefault();
                if (form != null)
                {
                    form.DocumentName = documentOriginalName;
                    //form.DocumentPath = documentPath;
                    form.DocumentSavedName = Path.GetFileName(documentPath);
                }
                _dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {

            }
            return false;
        }

        public bool UrjentRequestUpdate(Guid requestId, string UrjentRemark, string UrjentFlag)
        {
            try
            {
                var form = List().Where(w => w.Id.Equals(requestId)).FirstOrDefault();
                if (form != null)
                {
                    form.UrgentRemark = UrjentRemark;                   
                    form.UrgentFlag = Convert.ToBoolean(UrjentFlag);
                }
                _dbContext.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {

            }
            return false;
        }


        internal bool UpdateRequestStatusApproved(string approvalToken, string remarks)
        {
            var form = List().Where(w => w.Approvers.Any(a => a.ApprovalToken.Equals(approvalToken))).FirstOrDefault();
            if (form != null)
            {
                var approval = form.Approvers.Where(w => w.ApprovalToken.Equals(approvalToken, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
                approval.ApprovalStatus = ApprovalStatus.APPROVED;
                approval.ResponseDate = GeneralHelper.CurrentDate();
                approval.Remarks = remarks;
                if (form.Approvers.All(a => a.ApprovalStatus == ApprovalStatus.APPROVED))
                    form.Status = "Approved";
                _dbContext.SaveChanges();
                return true;
            }
            return false;
        }

        internal bool UpdateRequestStatusRejected(string approvalToken, string reason,string remark)
        {
            var form = List().Where(w => w.Approvers.Any(a => a.ApprovalToken.Equals(approvalToken))).FirstOrDefault();
            if (form != null)
            {
                var approval = form.Approvers.Where(w => w.ApprovalToken.Equals(approvalToken)).FirstOrDefault();
                approval.ApprovalStatus = ApprovalStatus.REJECTED;
                approval.ResponseDate = GeneralHelper.CurrentDate();
                approval.Reason = reason;
                approval.Remarks = remark;
                
                form.Status = "Rejected";               
                _dbContext.SaveChanges();
                return true;
            }
            return false;
        }

        internal bool CancelRequest(Guid requestId,string CloseReason, string CloseRemark)
        {
            var form = List().Where(w => w.Id.Equals(requestId)).FirstOrDefault();
            if (form != null)
            {
                form.IsCancelled = true;
                form.Status = "Cancelled";
                form.CancelPPRFReason = CloseReason;
                form.CancelPPRFRemark = CloseRemark;
                _dbContext.SaveChanges();
                return true;
            }
            return false;
        }
        internal bool CloseRequest(Guid IdToSearch, string userId,string CloseReason,string CloseRemark)
        {
            bool result = false;
            if (!IdToSearch.Equals(Guid.Empty))
            {
                var form = List().Where(w => w.Id.Equals(IdToSearch)).FirstOrDefault();
                if (form != null)
                {
                    form.IsClosed = true;
                    form.Status = "Closed";
                    form.ClosedById = userId.ToGuid();
                    form.CloseReason = CloseReason;
                    form.CloseRemark = CloseRemark;
                    _dbContext.SaveChanges();
                    result = true;
                }
            }
            return result;
        }

        internal bool NotesUpdate(Guid IdToSearch, string userId, string Notes)
        {
            bool result = false;
            if (!IdToSearch.Equals(Guid.Empty))
            {
                var form = List().Where(w => w.Id.Equals(IdToSearch)).FirstOrDefault();
                if (form != null)
                {
                    form.Note = Notes;                   
                    _dbContext.SaveChanges();
                    result = true;
                }
            }
            return result;
        }

        internal bool ApproverAskQuestion(Guid approvalId, ApproverRequestQuestion requestQuestion)
        {
            if (!approvalId.IsNullOrEmpty())
            {
                try
                {
                    var form = List().Where(w => w.Approvers.Any(a => a.Id.Equals(approvalId) && a.ApprovalStatus == ApprovalStatus.PENDING)).FirstOrDefault();
                    if (form != null)
                    {
                        var currentApprover = form.Approvers.Where(w => w.Id.Equals(approvalId)).FirstOrDefault();
                        var approverQueries = currentApprover.Queries;
                        requestQuestion.ApprovalId = approvalId;
                        approverQueries.Add(requestQuestion);
                        currentApprover.IsQuestionAsked = true;
                        _dbContext.SaveChanges();
                        return true;
                    }
                }
                catch (Exception e)
                {

                }
            }
            return false;
        }

        internal bool SaveAnswer(string questionId, string answer)
        {
            var returnValue = false;
            try
            {
                var form = List().Where(w => w.Approvers.Any(a => a.Queries.Any(aq => aq.Id.ToString().Equals(questionId, StringComparison.OrdinalIgnoreCase)))).FirstOrDefault();
                if (form != null)
                {
                    var approver = form.Approvers.Where(w => w.Queries.Any(a => a.Id.ToString().Equals(questionId, StringComparison.OrdinalIgnoreCase))).FirstOrDefault();
                    if (approver != null)
                    {
                        var question = approver.Queries.Where(w => w.Id.ToString().Equals(questionId, StringComparison.OrdinalIgnoreCase) && w.AnsweredOn == null).FirstOrDefault();
                        if (question != null)
                        {
                            question.Answer = answer;
                            question.AnsweredOn = GeneralHelper.CurrentDate();
                            approver.IsQuestionAsked = false;
                            _dbContext.SaveChanges();
                            returnValue = true;
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
            return returnValue;
        }

        internal void AddRequestDocument(PaymentRequestDocuments PPRFSupportDocument)
        {
            _dbContext.PaymentRequestDocuments.Add(PPRFSupportDocument);
            _dbContext.SaveChanges();
        }
    }
}
